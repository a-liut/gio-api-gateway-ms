/*
 * API Gateway Service
 *
 * API Gateway Microservice for the Gi√≤ system.
 *
 * API version: 1.0.0
 * Contact: andrea.liut@gmail.com
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */

package repository

import (
	"bytes"
	"encoding/json"
	"fmt"
	"github.com/a-liut/gio-api-gateway-ms/src/model"
	"io/ioutil"
	"net/http"
	"net/url"
)

type DeviceRepository struct {
	DevicesServiceUrl string
}

func (r *DeviceRepository) Get(id string) (*model.Device, error) {
	u := fmt.Sprintf("%s/devices/%s", r.DevicesServiceUrl, id)

	resp, err := http.Get(u)

	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	if resp.StatusCode == 404 {
		return nil, fmt.Errorf("device %s not found", id)
	} else if resp.StatusCode != 200 {
		return nil, fmt.Errorf("error while getting data for device %s", id)
	}

	var d model.Device
	err = json.NewDecoder(resp.Body).Decode(&d)

	if err != nil {
		return nil, err
	}

	return &d, nil
}

func (r *DeviceRepository) GetReadings(id string) ([]*model.Reading, error) {
	u := fmt.Sprintf("%s/devices/%s/readings", r.DevicesServiceUrl, id)

	resp, err := http.Get(u)

	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	if resp.StatusCode == 404 {
		return nil, fmt.Errorf("device %s not found", id)
	} else if resp.StatusCode != 200 {
		return nil, fmt.Errorf("error while getting data for device %s", id)
	}

	var rs []*model.Reading
	err = json.NewDecoder(resp.Body).Decode(&rs)

	if err != nil {
		return nil, err
	}

	return rs, nil
}

func (r *DeviceRepository) GetAll() ([]*model.Device, error) {
	u := fmt.Sprintf("%s/devices", r.DevicesServiceUrl)

	resp, err := http.Get(u)

	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	if resp.StatusCode != 200 {
		return nil, fmt.Errorf("error while getting data for devices")
	}

	var d []*model.Device
	err = json.NewDecoder(resp.Body).Decode(&d)

	if err != nil {
		return nil, err
	}

	return d, nil
}

func (r *DeviceRepository) Insert(device *model.Device) (*model.Device, error) {
	u := fmt.Sprintf("%s/devices", r.DevicesServiceUrl)

	b, err := json.Marshal(device)
	if err != nil {
		panic(err)
	}

	resp, err := http.Post(u, "application/json", bytes.NewBuffer(b))

	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	if resp.StatusCode != 200 {
		body, _ := ioutil.ReadAll(resp.Body)
		return nil, fmt.Errorf("error while performing the operation: %d - %s - %s", resp.StatusCode, resp.Status, string(body))
	}

	var d model.Device
	err = json.NewDecoder(resp.Body).Decode(&d)

	if err != nil {
		return nil, err
	}

	return &d, nil
}

var repo *DeviceRepository

func NewDeviceRepository() (*DeviceRepository, error) {
	if repo == nil {
		u, err := url.Parse("http://gio-device-ms:5001")
		if err != nil {
			return nil, err
		}
		repo = &DeviceRepository{u.String()}
	}

	return repo, nil
}
