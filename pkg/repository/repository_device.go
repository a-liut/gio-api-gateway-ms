/*
 * API Gateway Service
 *
 * API Gateway Microservice for the GiÃ² system.
 *
 * API version: 1.0.0
 * Contact: andrea.liut@gmail.com
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */

package repository

import (
	"bytes"
	"encoding/json"
	"fmt"
	"gio-api-gateway/pkg/model"
	"io/ioutil"
	"log"
	"net/http"
	"net/url"
	"os"
	"strings"
)

type DeviceRepository struct {
	devicesServiceUrl string
}

func (r *DeviceRepository) Get(roomId string, id string) (*model.Device, error) {
	u := fmt.Sprintf("%s/rooms/%s/devices/%s", r.devicesServiceUrl, roomId, id)

	resp, err := http.Get(u)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	if resp.StatusCode == 404 {
		return nil, nil
	} else if resp.StatusCode != 200 {
		return nil, fmt.Errorf("error while getting data for device %s", id)
	}

	var d model.Device
	err = json.NewDecoder(resp.Body).Decode(&d)

	if err != nil {
		return nil, err
	}

	return &d, nil
}

func (r *DeviceRepository) GetReadings(roomId string, id string, limit int, name string) ([]*model.Reading, error) {
	u := fmt.Sprintf("%s/rooms/%s/devices/%s/readings", r.devicesServiceUrl, roomId, id)

	var queryParams []string
	if limit > 0 {
		queryParams = append(queryParams, fmt.Sprintf("limit=%d", limit))
	}

	if name != "" {
		queryParams = append(queryParams, fmt.Sprintf("name=%s", name))
	}

	// Add query params if needed
	if len(queryParams) > 0 {
		u = u + "?"

		u = u + strings.Join(queryParams, "&")
	}

	resp, err := http.Get(u)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	if resp.StatusCode == 404 {
		return nil, nil
	} else if resp.StatusCode != 200 {
		return nil, fmt.Errorf("error while getting data for device %s", id)
	}

	var rs []*model.Reading
	err = json.NewDecoder(resp.Body).Decode(&rs)

	if err != nil {
		return nil, err
	}

	return rs, nil
}

func (r *DeviceRepository) GetAll(roomId string) ([]*model.Device, error) {
	u := fmt.Sprintf("%s/rooms/%s/devices", r.devicesServiceUrl, roomId)

	resp, err := http.Get(u)
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	if resp.StatusCode == 404 {
		return nil, nil
	} else if resp.StatusCode != 200 {
		return nil, fmt.Errorf("error while getting data for devices")
	}

	var d []*model.Device
	err = json.NewDecoder(resp.Body).Decode(&d)

	if err != nil {
		return nil, err
	}

	return d, nil
}

func (r *DeviceRepository) Insert(roomId string, device *model.Device) (*model.Device, error) {
	u := fmt.Sprintf("%s/rooms/%s/devices", r.devicesServiceUrl, roomId)

	b, err := json.Marshal(device)
	if err != nil {
		panic(err)
	}

	resp, err := http.Post(u, "application/json", bytes.NewBuffer(b))
	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	if resp.StatusCode != 200 {
		body, _ := ioutil.ReadAll(resp.Body)
		return nil, fmt.Errorf("error while performing the operation: %d - %s - %s", resp.StatusCode, resp.Status, string(body))
	}

	var d model.Device
	err = json.NewDecoder(resp.Body).Decode(&d)

	if err != nil {
		return nil, err
	}

	return &d, nil
}

func (r *DeviceRepository) InsertReading(roomId string, deviceId string, readingData *model.Reading) (*model.Reading, error) {
	u := fmt.Sprintf("%s/rooms/%s/devices/%s/readings", r.devicesServiceUrl, roomId, deviceId)

	b, err := json.Marshal(readingData)
	if err != nil {
		panic(err)
	}

	resp, err := http.Post(u, "application/json", bytes.NewBuffer(b))

	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		body, _ := ioutil.ReadAll(resp.Body)
		return nil, fmt.Errorf("error while performing the operation: %d - %s - %s", resp.StatusCode, resp.Status, string(body))
	}

	var rea model.Reading
	err = json.NewDecoder(resp.Body).Decode(&rea)

	if err != nil {
		return nil, err
	}

	return &rea, nil
}

func (r *DeviceRepository) TriggerAction(device *model.Device, actionName string) error {
	driver, err := GetSmartDriverManager(device.Room)
	if err != nil {
		return err
	}

	if err = driver.TriggerAction(device, actionName); err != nil {
		return err
	}

	return nil
}

var devicesRepository *DeviceRepository

func NewDeviceRepository() (*DeviceRepository, error) {
	serviceHost := os.Getenv("DEVICE_SERVICE_HOST")
	servicePort := os.Getenv("DEVICE_SERVICE_PORT")

	if devicesRepository == nil {
		serviceUrl := fmt.Sprintf("http://%s:%s", serviceHost, servicePort)
		log.Printf("DeviceService URL: %s\n", serviceUrl)

		if _, err := url.Parse(serviceUrl); err != nil {
			return nil, err
		}

		devicesRepository = &DeviceRepository{
			devicesServiceUrl: serviceUrl,
		}
	}

	return devicesRepository, nil
}

type DeviceDriverManager struct {
	url string
}

func (manager *DeviceDriverManager) TriggerAction(device *model.Device, actionName string) error {
	u := fmt.Sprintf("%s/devices/%s/actions/%s", manager.url, device.Mac, actionName)
	resp, err := http.Post(u, "application/json", nil)

	if err != nil {
		return err
	}

	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {

		// Get error response
		var bodyData model.ApiResponse
		err := json.NewDecoder(resp.Body).Decode(&bodyData)
		if err != nil {
			return err
		}

		return fmt.Errorf("cannot trigger action: (%d) %s", resp.StatusCode, bodyData.Message)
	}

	return nil
}

var driverManager *DeviceDriverManager = nil

func GetSmartDriverManager(roomId string) (*DeviceDriverManager, error) {
	if driverManager == nil {
		// TODO: check the room to route correctly the message

		deviceDriverHost := os.Getenv("DEVICE_DRIVER_HOST")
		deviceDriverPort := os.Getenv("DEVICE_DRIVER_PORT")

		u := fmt.Sprintf("http://%s:%s", deviceDriverHost, deviceDriverPort)
		log.Printf("DeviceDriver URL: %s\n", u)

		_, err := url.Parse(u)
		if err != nil {
			return nil, err
		}

		driverManager = &DeviceDriverManager{
			url: u,
		}
	}

	return driverManager, nil
}
