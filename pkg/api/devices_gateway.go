/*
 * API Gateway Service
 *
 * API Gateway Microservice for the Gi√≤ system.
 *
 * API version: 1.0.0
 * Contact: andrea.liut@gmail.com
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package api

import (
	"encoding/json"
	"gio-api-gateway/pkg/model"
	"gio-api-gateway/pkg/repository"
	"log"
	"net/http"
	"strconv"

	"github.com/gorilla/mux"
)

func GetDeviceById(w http.ResponseWriter, r *http.Request) {
	vars := mux.Vars(r)
	id := vars["deviceId"]
	roomId := vars["roomId"]

	repo, _ := repository.NewDeviceRepository()
	device, err := repo.Get(roomId, id)

	if err != nil {
		errorHandler(w, http.StatusInternalServerError, err.Error())
		return
	}

	if device == nil {
		errorHandler(w, http.StatusNotFound, "device not found")
		return
	}

	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(http.StatusOK)

	if err := json.NewEncoder(w).Encode(device); err != nil {
		log.Println(err)
	}
}

func GetDevices(w http.ResponseWriter, r *http.Request) {
	vars := mux.Vars(r)
	roomId := vars["roomId"]

	repo, _ := repository.NewDeviceRepository()
	devices, err := repo.GetAll(roomId)

	if err != nil {
		errorHandler(w, http.StatusInternalServerError, err.Error())
		return
	}

	if devices == nil {
		errorHandler(w, http.StatusNotFound, "room not found")
		return
	}

	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(http.StatusOK)

	if err := json.NewEncoder(w).Encode(devices); err != nil {
		log.Println(err)
	}
}

func GetDeviceReadings(w http.ResponseWriter, r *http.Request) {
	vars := mux.Vars(r)
	id := vars["deviceId"]
	roomId := vars["roomId"]

	lim := r.URL.Query().Get("limit")
	limit, err := strconv.Atoi(lim)
	if err != nil {
		limit = -1 // Take all readings
	}

	name := r.URL.Query().Get("name")

	repo, _ := repository.NewDeviceRepository()
	readings, err := repo.GetReadings(roomId, id, limit, name)

	if err != nil {
		errorHandler(w, http.StatusInternalServerError, err.Error())
		return
	}

	if readings == nil {
		errorHandler(w, http.StatusNotFound, "device not found")
		return
	}

	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(http.StatusOK)

	if err := json.NewEncoder(w).Encode(readings); err != nil {
		log.Println(err)
	}
}

func getActionData(r *http.Request) *model.ActionData {
	var actionData model.ActionData
	err := json.NewDecoder(r.Body).Decode(&actionData)
	if err != nil {
		return nil
	}

	return &actionData
}

func TriggerDeviceAction(w http.ResponseWriter, r *http.Request) {
	vars := mux.Vars(r)
	id := vars["deviceId"]
	roomId := vars["roomId"]
	actionName := vars["actionName"]

	log.Printf("TriggerDeviceAction called: %s", actionName)

	actionData := getActionData(r)
	if actionData == nil {
		log.Printf("WARNING: no data passed for action %s", actionName)
	}

	repo, _ := repository.NewDeviceRepository()
	device, err := repo.Get(roomId, id)
	if err != nil {
		errorHandler(w, http.StatusInternalServerError, err.Error())
		return
	}

	if device == nil {
		errorHandler(w, http.StatusNotFound, "device not found")
		return
	}

	err = repo.TriggerAction(device, actionName, actionData)
	if err != nil {
		errorHandler(w, http.StatusBadRequest, err.Error())
		return
	}

	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	code := http.StatusOK
	w.WriteHeader(code)

	res := model.ApiResponse{
		Code:    code,
		Message: "Action performed",
	}

	if err := json.NewEncoder(w).Encode(res); err != nil {
		log.Println(err)
	}
}
